#!/bin/bash
set -eo pipefail

# ==================== 全局配置 ====================
VERSION="5.2.0"                         # 脚本版本
LOG_FILE="ecp_install.log"              # 安装日志
DEFAULT_CP_PATH="$HOME/swan_ecp"        # 默认配置目录
MIN_STORAGE=200                         # 最小存储(GB)
ECP_VERSION="v1.0.2"                    # ECP版本
ZK_TOTAL_SIZE=214748364800              # 200GB (200*1024^3)
SWANSCAN_URL="https://swanscan.io/tx"   # 区块浏览器

# ==================== 颜色定义 ====================
RED='\033[0;31m'; GREEN='\033[0;32m'; YELLOW='\033[1;33m'
BLUE='\033[0;34m'; CYAN='\033[0;36m'; NC='\033[0m'

# ==================== 查看节点信息 ====================
show_node_info() {
    title
    echo -e "${GREEN}» 配置路径: ${YELLOW}${CP_PATH}${NC}"
    [ -n "$PARENT_PATH" ] && echo -e "${GREEN}» ZK参数路径: ${YELLOW}${PARENT_PATH}${NC}"
    echo -e "\n${GREEN}=== 节点信息 ===${NC}"
    ./computing-provider --repo "$CP_PATH" info
    read -p "按回车返回主菜单..."
}
# ==================== 功能函数 ====================
error() { echo -e "${RED}[✗] $*${NC}" >&2; exit 1; }
warn() { echo -e "${YELLOW}[!] $*${NC}" >&2; }
info() { echo -e "${GREEN}[✓] $*${NC}" >&2; }
title() { clear; echo -e "${BLUE}\n▓ SwanChain ECP 管理套件 v${VERSION} ▓${NC}"; }

# ==================== 存储检查 ====================
check_storage() {
    local path="$1"
    local available=$(df -BG "$path" | awk 'NR==2 {print $4}' | tr -d 'G')
    [ "$available" -ge "$MIN_STORAGE" ] || error "存储空间不足！需要至少 ${MIN_STORAGE}GB，当前可用 ${available}GB"
    info "存储空间检查通过：可用 ${available}GB"
}

# ==================== 主安装流程 ====================
main_install() {
    title
    info "开始ECP节点安装"
    
    # 配置路径
    read -p "输入节点配置路径 [默认: $DEFAULT_CP_PATH]: " CP_PATH
    export CP_PATH=${CP_PATH:-$DEFAULT_CP_PATH}
    mkdir -p "$CP_PATH"
    
    # 依赖安装
    info "安装系统依赖..."
    curl -fsSL https://raw.githubusercontent.com/swanchain/go-computing-provider/releases/ubi/setup.sh | bash
    
    # 下载核心程序
    info "下载ECP核心..."
    wget -qc "https://github.com/swanchain/go-computing-provider/releases/download/${ECP_VERSION}/computing-provider" -O "$CP_PATH/computing-provider"
    chmod +x "$CP_PATH/computing-provider"
    
    # 节点初始化
    info "节点初始化..."
    read -p "请输入公网IP地址: " ip
    read -p "请输入节点名称: " name
    "$CP_PATH/computing-provider" --repo "$CP_PATH" init --multi-address="/ip4/$ip/tcp/9085" --node-name="$name"
    
    # 账户配置
    wallet_setup
    init_account
    
    info "基础安装完成！输入 ./$(basename "$0") 进入管理菜单"
}

# ==================== 钱包管理 ====================
wallet_setup() {
    title
    local wallet_file="${CP_PATH}/.wallet_address"
    
    PS3=$'\n请选择钱包操作: '
    select opt in "创建新钱包" "导入私钥" "返回主菜单"; do
        case $opt in
            "创建新钱包") create_wallet; break ;;
            "导入私钥") import_wallet; break ;;
            *) main_menu ;;
        esac
    done
}

create_wallet() {
    info "正在生成新钱包..."
    local output=$("./computing-provider" --repo "$CP_PATH" wallet new)
    WALLET_ADDRESS=$(grep -oE '0x[a-fA-F0-9]{40}' <<< "$output")
    echo "$WALLET_ADDRESS" > "${CP_PATH}/.wallet_address"
    info "地址: ${WALLET_ADDRESS}"
    warn "请妥善保管生成的私钥文件：${CP_PATH}/${WALLET_ADDRESS}.key"
}

import_wallet() {
    local max_retry=3 attempt=0
    local wallet_file="${CP_PATH}/.wallet_address"

    while [ $attempt -lt $max_retry ]; do
        title
        echo -e "${BLUE}===== 钱包导入 (尝试 $((attempt+1))/$max_retry) ====="
        read -sp "请输入私钥 (0x前缀可选): " key
        echo
        
        # 清理输入
        key=$(tr -d '[:space:]' <<< "$key")
        key=${key#0x}

        # 格式验证
        if [[ ! "$key" =~ ^[a-fA-F0-9]{64}$ ]]; then
            warn "无效私钥格式：长度应为64位十六进制字符"
            sleep 2
            ((attempt++))
            continue
        fi

        # 执行导入
        local temp_output=$(mktemp)
        trap "rm -f '$temp_output'" EXIT

        if ! echo "$key" | "./computing-provider" --repo "$CP_PATH" wallet import 2>&1 | tee "$temp_output"; then
            if grep -q "already exists" "$temp_output"; then
                WALLET_ADDRESS=$("./computing-provider" --repo "$CP_PATH" wallet list | grep -oE '0x[a-fA-F0-9]{40}' | head -1)
                [ -n "$WALLET_ADDRESS" ] && break
            fi
            warn "导入失败，错误信息："
            cat "$temp_output"
            sleep 3
            ((attempt++))
        else
            WALLET_ADDRESS=$(grep -oE '0x[a-fA-F0-9]{40}' "$temp_output" | tail -1)
            [ -n "$WALLET_ADDRESS" ] && break
        fi
    done

    [ $attempt -eq $max_retry ] && error "连续${max_retry}次导入失败"
    
    echo "$WALLET_ADDRESS" > "$wallet_file"
    chmod 600 "$wallet_file"
    info "导入成功! 地址: ${WALLET_ADDRESS}"
}

# ==================== 经济功能 ====================
execute_transaction() {
    local command="$1" msg="$2"
    local temp_file=$(mktemp)
    
    if ! eval "$command" 2>&1 | tee "$temp_file"; then
        error "$msg 失败，完整日志：\n$(cat "$temp_file")"
    fi
    
    local tx_hash=$(grep -oE '(TxHash|transaction hash): 0x[a-fA-F0-9]{64}' "$temp_file" | cut -d' ' -f2-)
    [ -n "$tx_hash" ] && echo -e "${CYAN}交易哈希: ${YELLOW}${tx_hash##* }${NC}\n${CYAN}区块浏览器: ${YELLOW}${SWANSCAN_URL}/${tx_hash##* }${NC}"
    
    rm -f "$temp_file"
    info "$msg 成功"
}

stake_swan() {
    title
    local wallet=$(get_wallet_address)
    info "当前质押余额: $(./computing-provider --repo "$CP_PATH" collateral info)"
    
    while :; do
        read -p "输入质押SWAN数量 (整数): " amount
        [[ "$amount" =~ ^[0-9]+$ ]] && break
        warn "请输入有效整数"
    done
    
    execute_transaction \
        "./computing-provider --repo \"$CP_PATH\" collateral add --ecp --from \"$wallet\" \"$amount\"" \
        "质押 ${amount} SWAN"
}

deposit_sequencer() {
    title
    local wallet=$(get_wallet_address)
    info "当前Sequencer余额: $(./computing-provider --repo "$CP_PATH" sequencer info)"
    
    while :; do
        read -p "输入存款金额 (ETH，支持小数): " amount
        [[ "$amount" =~ ^[0-9]+(\.[0-9]+)?$ ]] && break
        warn "请输入有效数字"
    done
    
    execute_transaction \
        "./computing-provider --repo \"$CP_PATH\" sequencer add --from \"$wallet\" \"$amount\"" \
        "存入 ${amount} ETH"
}

# ==================== ZK管理 ====================
zk_progress() {
    local current=$(du -sb "$PARENT_PATH" 2>/dev/null | cut -f1)
    local percent=$(( current*100/ZK_TOTAL_SIZE ))
    echo -ne "下载进度: ["
    for ((i=0; i<50; i++)); do
        [ $i -lt $((percent/2)) ] && echo -n '#' || echo -n '-'
    done
    echo -e "] ${percent}% ($(numfmt --to=iec $current)/$(numfmt --to=iec $ZK_TOTAL_SIZE))"
}

download_zk_params() {
    read -p "输入ZK参数存储路径 [默认: $HOME/zk_params]: " PARENT_PATH
    export PARENT_PATH=${PARENT_PATH:-$HOME/zk_params}
    check_storage "$PARENT_PATH"
    
    info "开始下载ZK参数..."
    (
        info "下载512MiB参数..."
        curl -#C - -fSL https://raw.githubusercontent.com/swanchain/go-computing-provider/releases/ubi/fetch-param-512.sh | bash
        
        info "下载32GiB参数..."
        curl -#C - -fSL https://raw.githubusercontent.comswanchain/go-computing-provider/releases/ubi/fetch-param-32.sh | bash
    ) >> "$LOG_FILE" 2>&1 &
    info "后台下载进程PID: $!"
}

# ==================== 服务管理 ====================
service_manager() {
    case $1 in
        start)
            info "正在启动节点..."
            export RUST_GPU_TOOLS_CUSTOM_GPU=$(get_gpu_info)
            nohup ./computing-provider --repo "$CP_PATH" ubi daemon >> "$CP_PATH/cp.log" 2>&1 &
            sleep 3
            check_service_running || error "启动失败，请检查日志"
            ;;
        stop)
            info "正在停止节点..."
            pkill -f "computing-provider" && info "服务已停止" || warn "服务未运行"
            ;;
        restart)
            service_manager stop
            service_manager start
            ;;
    esac
}

# ==================== 菜单系统 ====================
main_menu() {
    while :; do
        title
        echo -e "服务状态: $(check_service_running && echo -e "${GREEN}运行中" || echo -e "${RED}已停止")${NC}"
        echo -e "${BLUE}[1] 启动节点    [2] 停止节点    [3] 重启节点"
        echo -e "[4] 经济操作     [5] ZK参数管理   [6] 节点信息"
        echo -e "[7] 实时日志    [8] 钱包管理     [0] 退出系统${NC}"
        
        read -p "请输入选项: " choice
        case $choice in
            1) service_manager start ;;
            2) service_manager stop ;;
            3) service_manager restart ;;
            4) economic_menu ;;
            5) zk_menu ;;
            6) show_node_info ;;
            7) show_logs ;;
            8) wallet_setup ;;
            0) exit 0 ;;
            *) warn "无效选项"; sleep 1 ;;
        esac
        read -p "按回车继续..."
    done
}

economic_menu() {
    while :; do
        title
        echo -e "${BLUE}===== 经济操作 ====="
        echo -e "[1] 质押 SWAN       [2] 存入 Sequencer"
        echo -e "[3] 查看质押余额    [4] 查看存款余额"
        echo -e "[0] 返回主菜单${NC}"
        
        read -p "请选择操作: " choice
        case $choice in
            1) stake_swan ;;
            2) deposit_sequencer ;;
            3) show_collateral ;;
            4) show_sequencer ;;
            0) break ;;
            *) warn "无效选项"; sleep 1 ;;
        esac
    done
}

zk_menu() {
    while :; do
        title
        echo -e "${BLUE}===== ZK参数管理 ====="
        echo -e "[1] 开始下载参数    [2] 查看下载进度"
        echo -e "[0] 返回主菜单${NC}"
        
        read -p "请选择操作: " choice
        case $choice in
            1) download_zk_params ;;
            2) zk_progress ;;
            0) break ;;
            *) warn "无效选项"; sleep 1 ;;
        esac
    done
}

# ==================== 辅助函数 ====================
check_service_running() { pgrep -f "computing-provider" >/dev/null; }
get_gpu_info() {
    local gpu_info=$(nvidia-smi --query-gpu=name,compute_cap --format=csv,noheader | head -n1)
    [ -n "$gpu_info" ] && echo "${gpu_info%,*}" | tr ' ' '_' || echo "CPU"
}
show_node_info() { ./computing-provider --repo "$CP_PATH" info; }
show_logs() { tail -f "$CP_PATH/cp.log"; }
show_collateral() { ./computing-provider --repo "$CP_PATH" collateral info; }
show_sequencer() { ./computing-provider --repo "$CP_PATH" sequencer info; }
get_wallet_address() { cat "${CP_PATH}/.wallet_address"; }

# ==================== 执行入口 ====================
[ $# -gt 0 ] && {
    case $1 in
        install) main_install ;;
        *) error "未知参数: $1" ;;
    esac
}

[ -f "$CP_PATH/computing-provider" ] && main_menu || main_install
